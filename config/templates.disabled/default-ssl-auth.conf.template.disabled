# =================================================================
# FKS Trading Systems - Nginx SSL Configuration with Authentication
# =================================================================
# Enhanced nginx configuration with SSL, subdomains, and basic auth

# Upstream backends
upstream api_backend {
    server ${API_HOST}:${API_PORT} max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream web_backend {
    server ${WEB_HOST}:${WEB_PORT} max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;

# Map to determine if authentication is required
map $uri $auth_required {
    ~*^/health          "off";
    ~*^/api/health      "off";
    ~*^/api/docs/public "off";
    default             "FKS Trading Systems";
}

# Redirect all HTTP to HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    
    # Allow Let's Encrypt challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Health check endpoint (always available on HTTP)
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main domain - React Web App
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/chain.pem;
    
    # SSL optimization
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https: wss:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;
    
    # Authentication
    auth_basic $auth_required;
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    
    # Client body size
    client_max_body_size ${CLIENT_MAX_BODY_SIZE};
    
    # Default location - proxy to web backend
    location / {
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Handle React Router
        proxy_intercept_errors on;
        error_page 404 = @reactrouter;
    }
    
    location @reactrouter {
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Health check (no auth)
    location /health {
        auth_basic off;
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
}

# API subdomain
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name api.${DOMAIN_NAME};
    
    # SSL configuration (same as main)
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/chain.pem;
    
    # SSL settings (same as main)
    include /etc/nginx/ssl-params.conf;
    
    # Authentication
    auth_basic $auth_required;
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    # Rate limiting for API
    limit_req zone=api burst=50 nodelay;
    
    # Client body size for API uploads
    client_max_body_size ${CLIENT_MAX_BODY_SIZE};
    
    # API proxy
    location / {
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Timeouts
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "https://${DOMAIN_NAME}" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
    
    # Health check (no auth)
    location /health {
        auth_basic off;
        proxy_pass http://api_backend/health;
        access_log off;
    }
}

# WebSocket subdomain
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ws.${DOMAIN_NAME};
    
    # SSL configuration (same as main)
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/chain.pem;
    
    # SSL settings
    include /etc/nginx/ssl-params.conf;
    
    # Authentication for WebSocket
    auth_basic "FKS Trading Systems";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    # WebSocket proxy
    location / {
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        
        # Disable buffering for WebSocket
        proxy_buffering off;
    }
}

# Documentation subdomain
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name docs.${DOMAIN_NAME};
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/chain.pem;
    
    # SSL settings
    include /etc/nginx/ssl-params.conf;
    
    # Authentication
    auth_basic "FKS Documentation";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    # Documentation proxy
    location / {
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add docs-specific header
        proxy_set_header X-Docs-Request "true";
    }
    
    # API endpoints for docs
    location /api/docs {
        proxy_pass http://api_backend/api/docs;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Web subdomain (alternative access)
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name web.${DOMAIN_NAME};
    
    # Redirect to main domain
    return 301 https://${DOMAIN_NAME}$request_uri;
}

# Include monitoring subdomains if they exist
include /etc/nginx/sites-enabled/monitoring-*.conf;

# =================================================================
# dev-multi.conf.template
# =================================================================
# Local development nginx with one primary domain and handy subdomains
#
# Usage:
#   - Set BASE_DOMAIN (e.g., fkstrading.test) in the nginx container env
#     or docker-compose (environment: BASE_DOMAIN=fkstrading.test)
#   - This config proxies:
#       http://$BASE_DOMAIN            -> web (Vite dev server)
#       http://$BASE_DOMAIN/api        -> api service
#       http://$BASE_DOMAIN/data       -> data service
#       ws://$BASE_DOMAIN/ws           -> api service (WebSocket)
#       http://auth.$BASE_DOMAIN       -> (unused: authelia removed)
#       http://api.$BASE_DOMAIN        -> api service (optional direct)
#       http://data.$BASE_DOMAIN       -> data service (optional direct)

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream web_backend {
    server ${WEB_HOST}:${WEB_PORT} max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream api_backend {
    server ${API_HOST}:${API_PORT} max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream data_backend {
    server data:9001 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream transformer_backend {
    server ${TRANSFORMER_HOST}:${TRANSFORMER_PORT} max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream engine_backend {
    server ${ENGINE_HOST}:${ENGINE_PORT} max_fails=3 fail_timeout=30s;
    keepalive 16;
}

# Monitoring upstreams
upstream prometheus_backend {
    server ${PROMETHEUS_HOST}:${PROMETHEUS_PORT} max_fails=3 fail_timeout=30s;
    keepalive 8;
}

upstream grafana_backend {
    server ${GRAFANA_HOST}:${GRAFANA_PORT} max_fails=3 fail_timeout=30s;
    keepalive 8;
}

# Placeholder upstream for training to avoid startup failures when not present
upstream training_backend {
    server 127.0.0.1:8088 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

# Authelia forward-auth handled via internal location (see bottom)

# ---------------------------------------------------------------
# Primary domain: $BASE_DOMAIN
# - Serves the SPA and proxies API, Data, and WS under paths
# ---------------------------------------------------------------
server {
    listen 80;
    listen [::]:80;
    server_name ${BASE_DOMAIN};

    # Health
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API proxy (protected by Authelia)
    location /api/ {
        auth_request /authelia-auth;
        proxy_pass http://api_backend/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};
    }

    # Data proxy (protected by Authelia)
    location /data/ {
        auth_request /authelia-auth;
        proxy_pass http://data_backend/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};
    }

    # Engine proxy (protected by Authelia)
    location /engine/ {
        auth_request /authelia-auth;
        proxy_pass http://engine_backend/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};
    }

    # WebSocket for realtime (protected by Authelia)
    location /ws {
        auth_request /authelia-auth;
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }

    # SPA callback can stay on primary domain
    location = /auth/callback {
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};
    }

    # SPA + Vite HMR
    location / {
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # HMR/WS
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};
    }

    # Transformer (GPU inference) routes
    location /transformer/ {
        proxy_pass http://transformer_backend/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";

        # Timeouts
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};

        # CORS for browser access
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        add_header Access-Control-Allow-Credentials "true" always;

    if ($request_method = OPTIONS) { return 204; }
    }

    # Training routes are disabled in dev by default (service optional)

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Internal Authelia forward-auth endpoint (DISABLED: returns 204 to bypass auth)
    # To re-enable Authelia remove this stub and restore proxy_pass to Authelia.
    location = /authelia-auth {
        internal;
        return 204;
    }
}

# ---------------------------------------------------------------
# Optional direct subdomains for convenience
# ---------------------------------------------------------------
server {
    listen 80;
    listen [::]:80;
    server_name api.${BASE_DOMAIN};

    location /health { access_log off; return 200 "healthy\n"; add_header Content-Type text/plain; }
    location / { auth_request /authelia-auth; proxy_pass http://api_backend; proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; }
    location /ws { auth_request /authelia-auth; proxy_pass http://api_backend; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_read_timeout 3600s; }

    # Authelia disabled stub (returns 204)
    location = /authelia-auth { internal; return 204; }
}

server {
    listen 80;
    listen [::]:80;
    server_name data.${BASE_DOMAIN};

    location /health { access_log off; return 200 "healthy\n"; add_header Content-Type text/plain; }
    location / { auth_request /authelia-auth; proxy_pass http://data_backend; proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; }

    # Authelia disabled stub (returns 204)
    location = /authelia-auth { internal; return 204; }
}

server {
    listen 80;
    listen [::]:80;
    server_name engine.${BASE_DOMAIN};

    location /health { access_log off; return 200 "healthy\n"; add_header Content-Type text/plain; }
    location / {
    auth_request /authelia-auth;
    proxy_pass http://engine_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};
    }

    # Authelia disabled stub (returns 204)
    location = /authelia-auth { internal; return 204; }
}

# Auth subdomain removed in favor of Authelia forward-auth

# Optional direct transformer subdomain
server {
    listen 80;
    listen [::]:80;
    server_name transformer.${BASE_DOMAIN};

    location /health { access_log off; return 200 "healthy\n"; add_header Content-Type text/plain; }
    location / {
    auth_request /authelia-auth;
    proxy_pass http://transformer_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT};
        proxy_read_timeout ${PROXY_READ_TIMEOUT};
    }

    # Authelia disabled stub (returns 204)
    location = /authelia-auth { internal; return 204; }
}

# Prometheus metrics subdomain (protected)
server {
    listen 80;
    listen [::]:80;
    server_name prometheus.${BASE_DOMAIN};

    location /health { access_log off; return 200 "healthy\n"; add_header Content-Type text/plain; }
    location / {
        auth_request /authelia-auth;
        proxy_pass http://prometheus_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Authelia disabled stub (returns 204)
    location = /authelia-auth { internal; return 204; }
}

# Grafana dashboard subdomain (protected)
server {
    listen 80;
    listen [::]:80;
    server_name grafana.${BASE_DOMAIN};

    location /health { access_log off; return 200 "healthy\n"; add_header Content-Type text/plain; }
    location / {
        auth_request /authelia-auth;
        proxy_pass http://grafana_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Authelia disabled stub (returns 204)
    location = /authelia-auth { internal; return 204; }
}
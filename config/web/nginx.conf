# =================================================================
# Nginx Configuration for Web Server
# =================================================================
# 
# Purpose: Static React app serving with API proxying
# Domain: fkstrading.xyz
# 
# =================================================================

user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Basic optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=web:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=60r/m;

    # Upstream for API server
    upstream api_backend {
        server api.fkstrading.xyz:8000;
        keepalive 32;
    }

    # Upstream for Auth server
    upstream auth_backend {
        server auth.fkstrading.xyz:9000;
        keepalive 16;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name fkstrading.xyz www.fkstrading.xyz;
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://fkstrading.xyz$request_uri;
        }
    }

    # HTTPS server for www redirect
    server {
        listen 443 ssl http2;
        server_name www.fkstrading.xyz;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/live/www.fkstrading.xyz/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live/www.fkstrading.xyz/privkey.pem;

        # Redirect to non-www
        return 301 https://fkstrading.xyz$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name fkstrading.xyz;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/live/fkstrading.xyz/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live/fkstrading.xyz/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/live/fkstrading.xyz/chain.pem;

        # SSL optimization
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # CSP header for React app
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data: https:; connect-src 'self' https://api.fkstrading.xyz https://auth.fkstrading.xyz wss://api.fkstrading.xyz;" always;

        # Rate limiting
        limit_req zone=web burst=50 nodelay;

        # Root directory for static files
        root /usr/share/nginx/html;
        index index.html;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "Web Server OK\n";
            add_header Content-Type text/plain;
        }

        # API proxy
        location /api/ {
            limit_req zone=api burst=100 nodelay;
            
            proxy_pass https://api_backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Cache API responses
            proxy_cache api_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_bypass $http_upgrade;
            
            add_header X-Cache-Status $upstream_cache_status;
        }

        # WebSocket proxy for real-time data
        location /ws/ {
            proxy_pass https://api_backend/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket specific timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Auth proxy for OAuth flows
        location /auth/ {
            proxy_pass https://auth_backend/;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Static assets with caching
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot|webp)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # Try gzipped version first
            location ~* \.(css|js)$ {
                gzip_static on;
            }
            
            # WebP support
            location ~* \.(jpg|jpeg|png)$ {
                set $webp_suffix "";
                if ($http_accept ~* "webp") {
                    set $webp_suffix ".webp";
                }
                try_files $uri$webp_suffix $uri =404;
            }
        }

        # React app routing - must be last
        location / {
            try_files $uri $uri/ /index.html;
            
            # Cache HTML files briefly
            location ~* \.html$ {
                expires 1h;
                add_header Cache-Control "public, must-revalidate";
            }
        }

        # Security - block access to sensitive files
        location ~ /\. {
            deny all;
        }
        
        location ~ /(package\.json|yarn\.lock|package-lock\.json)$ {
            deny all;
        }
    }
}

## =================================================================
## FKS Trading Systems - Simplified Nginx (no external IdP)
## Replaces prior Authentik-based config. Keeps minimal proxy + safety.
## =================================================================

## Upstreams (match actual Docker service names on fks_net)
upstream api_backend  { server fks_api:8000;  keepalive 16; }
upstream web_backend  { server fks_web:80;   keepalive 16; }
upstream data_backend { server fks_data:4200; keepalive 8; }
upstream auth_backend { server fks_auth:4100; keepalive 8; }

map $http_upgrade $connection_upgrade { default upgrade; '' close; }

# CORS allow-list for api.* subdomains (only our apex + www variants)
map $http_origin $cors_allow_origin {
    default "";
    ~^https?://(www\.)?fkstrading\.test$ $http_origin;
    ~^https?://(www\.)?fkstrading\.xyz$ $http_origin;
}

## Basic rate limits (tunable)
limit_req_zone $binary_remote_addr zone=api_rate:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=web_rate:10m rate=50r/s;

## -----------------------------------------------------------------
## MAIN WEB (root + www) - Both test & prod domains + localhost
## -----------------------------------------------------------------
## Redirect block (HTTP -> HTTPS) for root/web
server {
    listen 80;
    server_name localhost fkstrading.test www.fkstrading.test fkstrading.xyz www.fkstrading.xyz;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name localhost fkstrading.test www.fkstrading.test fkstrading.xyz www.fkstrading.xyz;
    client_max_body_size 2G;

    ssl_certificate     /etc/nginx/certs/selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/selfsigned.key;
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always; # enable after valid certs

    # Security headers (lightweight)
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy no-referrer-when-downgrade always;

    # Health
    location = /health { access_log off; return 200 "nginx:ok\n"; }

    # Optionally redirect www -> apex (uncomment if desired)
    # if ($host ~* ^www\.(.*)) { return 308 $scheme://$1$request_uri; }

    # Static (from underlying web container) - hashed assets assumed => long cache
    location /static/ {
        proxy_pass http://web_backend/static/;
        proxy_set_header Host $host;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
    }

    # Generic static extensions (when proxied) - shorter cache
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff2?)$ {
        proxy_pass http://web_backend$request_uri;
        proxy_set_header Host $host;
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
    }

    # API prefix (path style) still works when hitting root domain
    location /api/ {
        limit_req zone=api_rate burst=40 nodelay;
        proxy_pass http://api_backend$request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_read_timeout 300s;
    }

    # Data prefix (optional)
    location /data/ {
        proxy_pass http://data_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # SPA root
    location / {
        limit_req zone=web_rate burst=120 nodelay;
        proxy_pass http://web_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    access_log /var/log/nginx/fks_access_root.log;
    error_log  /var/log/nginx/fks_error_root.log warn;
}

## -----------------------------------------------------------------
## API SUBDOMAINS (api.fkstrading.test + api.fkstrading.xyz)
## -----------------------------------------------------------------
## Redirect block (HTTP -> HTTPS) API
server {
    listen 80;
    server_name api.fkstrading.test api.fkstrading.xyz;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name api.fkstrading.test api.fkstrading.xyz;
    client_max_body_size 50M;
    ssl_certificate     /etc/nginx/certs/selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/selfsigned.key;
    add_header X-Content-Type-Options nosniff always;
    add_header Access-Control-Allow-Origin *; # adjust / tighten in prod

    location = /health { access_log off; return 200 "api:ok\n"; }

    # Preflight handling & proxied API
    location / {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $cors_allow_origin always;
            add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization,Content-Type,Accept" always;
            add_header Access-Control-Max-Age 86400 always;
            add_header Vary Origin always;
            return 204;
        }
        limit_req zone=api_rate burst=60 nodelay;
        proxy_pass http://api_backend$request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_read_timeout 300s;
        add_header Access-Control-Allow-Origin $cors_allow_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Vary Origin always;
    }

    access_log /var/log/nginx/fks_access_api.log;
    error_log  /var/log/nginx/fks_error_api.log warn;
}

## -----------------------------------------------------------------
## DATA SUBDOMAINS (data.fkstrading.*)
## -----------------------------------------------------------------
## Redirect block (HTTP -> HTTPS) DATA
server {
    listen 80;
    server_name data.fkstrading.test data.fkstrading.xyz;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name data.fkstrading.test data.fkstrading.xyz;
    client_max_body_size 2G;
    ssl_certificate     /etc/nginx/certs/selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/selfsigned.key;
    location = /health { access_log off; return 200 "data:ok\n"; }
    location / {
        proxy_pass http://data_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    access_log /var/log/nginx/fks_access_data.log;
    error_log  /var/log/nginx/fks_error_data.log warn;
}

## -----------------------------------------------------------------
## AUTH SUBDOMAINS (auth.fkstrading.*) - placeholder passthrough
## -----------------------------------------------------------------
## Redirect block (HTTP -> HTTPS) AUTH
server {
    listen 80;
    server_name auth.fkstrading.test auth.fkstrading.xyz;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name auth.fkstrading.test auth.fkstrading.xyz;
    client_max_body_size 50M;
    ssl_certificate     /etc/nginx/certs/selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/selfsigned.key;
    location = /health { access_log off; return 200 "auth:ok\n"; }
    location / {
        proxy_pass http://auth_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    access_log /var/log/nginx/fks_access_auth.log;
    error_log  /var/log/nginx/fks_error_auth.log warn;
}

# (Optional) Future: duplicate the above blocks with `listen 443 ssl http2;`
# and reference /etc/nginx/certs/selfsigned.crt /etc/nginx/certs/selfsigned.key
# once SAN certificate covers all listed names.

# NOTE: Removed all auth_request / Authelia blocks. Reintroduce auth via
# gateway by inserting auth subrequests or JWT validation directives here
# once the Rust auth service publishes an internal validation endpoint.

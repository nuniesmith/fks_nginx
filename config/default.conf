resolver 127.0.0.11 ipv6=off valid=30s;

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

upstream fks_api_up { server fks_api:8000; }
upstream fks_data_up { server fks_data:4200; }
upstream fks_engine_up { server fks_engine:4300; }
upstream fks_web_up { server fks_web:80; }

server {
  listen 80;
  server_name localhost;
  location /health { return 200 'OK'; add_header Content-Type text/plain; }
  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl;
  server_name localhost;

  ssl_certificate /etc/nginx/certs/selfsigned.crt;
  ssl_certificate_key /etc/nginx/certs/selfsigned.key;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers HIGH:!aNULL:!MD5;

  add_header X-Content-Type-Options nosniff;
  add_header X-Frame-Options DENY;
  add_header X-XSS-Protection "1; mode=block";

  location /health { return 200 '{"status":"healthy","service":"nginx"}'; add_header Content-Type application/json; }
  # Preserve /api prefix when proxying (no trailing slash on proxy_pass) so backend sees /api/...
  location /api/ {
    proxy_pass http://fks_api_up;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
  }
  # These internal services may also expect their path prefixes; if 404s occur, adjust similarly (remove trailing slash from proxy_pass)
  location /data/ { proxy_pass http://fks_data_up/; proxy_set_header Host $host; }
  location /engine/ { proxy_pass http://fks_engine_up/; proxy_set_header Host $host; }
  location / { proxy_pass http://fks_web_up/; proxy_set_header Host $host; }
}
